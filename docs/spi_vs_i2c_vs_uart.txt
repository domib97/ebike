---------------------------------------------------------------------------------------------------

Stands for Universal Asynchronous Reception and Transmission (UART)
A simple serial communication protocol that allows the host communicates with the auxiliary device.
UART supports bi-directional, asynchronous and serial data transmission.
It has two data lines, one to transmit (TX) and another to receive (RX) which is used to communicate through
digital pin 0, digital pin 1.

Advantages of using UART:
Simple to operate, well documented as it is a widely used method with a lot of resources online
No clock needed
Parity bit to allow for error checking

Disadvantages of using UART:
Size of the data frame is limited to only 9 bits
Cannot use multiple master systems and slaves
Baud rates of each UART must be within 10% of each other to prevent data loss.
Low speed

---------------------------------------------------------------------------------------------------

Stands for Inter-integrated-circuit (I2C)
It is a serial communications protocol similarly to UART but not used for PC-device communication but are 
used with modules and sensors.
It is a simple, bidirectional two-wire synchronous serial bus and requires only two wires to transmit 
information between devices connected to the bus.
They are useful for projects that require many different parts (eg. sensors, pin, expansions and drivers) 
working together as they can connect up to 128 devices
to the mainboard while maintaining a clear communication pathway!

It has 2 Lines which are SCL (serial clock line) and SDA (serial data line acceptance port)
CL is the clock line for synchronizing transmission. SDA is the data line through which bits of data
are sent or received.

Advantages of using I2C:
Has a low pin/signal count even with numerous devices on the bus
Flexible, as it supports multi-master and multi slave communication.
Simple as it only uses 2 bidirectional wires to establish communication among multiple devices.
Adaptable as it can adapt to the needs of various slave devices.
Support multiple masters.

Disadvantages of using I2C:
Slower speed as it requires pull-up resistors rather than push-pull resistors used by SPI.  It also has an open-drain design = limited speed.
Requires more space as the resistors consume valuable PCB real estate.
May become complex as the number of devices increases.

---------------------------------------------------------------------------------------------------

Stands for Serial Peripheral Interface (SPI)
It is similar to I2C and it is a different form of serial-communications protocol specially designed
 for microcontrollers to connect.
Operates at full-duplex where data can be sent and received simultaneously.
Operate at faster data transmission rates = 8Mbits or more
It is typically faster than I2C due to the simple protocol. Even if data/clock lines are shared
 between devices, each device will require a unique address wire.
Used in places where speed is important. (eg. SD cards, display modules or when info updates and changes
 quickly like thermometers)

The SPI communicates via 4 ports which are:
MOSI – Master Data Output, Slave Data Input
MISO – master data input, slave data output
SCLK – clock signal, generated by the master device, up to fPCLK/2, slave mode frequency up to fCPU/2
NSS – Slave enabled signal, controlled by the master device, some ICs will be labelled as CS (Chip select)

Advantages of using SPI:
The protocol is simple as there is no complicated slave addressing system like I2C.
It is the fastest protocol compared to UART and I2C.
No start and stop bits unlike UART which means data can be transmitted continuously without interruption
Separate MISO and MOSI lines which means data can be transmitted and received at the same time

Disadvantages of using SPI:
More Pin ports are occupied, the practical limit to a number of devices.
There is no flow control specified, and no acknowledgement mechanism confirms whether data
is received unlike I2C
Uses four lines – MOSI, MISO, NCLK, NSS
No form of error check unlike in UART (using parity bit)
Only 1 master